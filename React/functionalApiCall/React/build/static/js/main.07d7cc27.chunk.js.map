{"version":3,"sources":["Components/JobCard.jsx","Components/JobCards.jsx","Components/NavBar.jsx","Components/ActiveJob.jsx","Components/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["JobCard","className","onClick","props","onClickActive","jobs","this","jobTitle","companyName","shortDesc","Component","JobCards","getClassNames","status","cards","i","length","push","NavBar","href","ActiveJob","src","alt","height","width","job","Search","state","type","placeholder","aria-label","onChange","event","onChangeMatchingCompanyName","target","value","request","require","App","showOption","activeJob","matchingCompanyName","handleUpdateJobsList","totalJobs","setState","handleClickActive","el","handleChangeShowOption","handleChangeMatchingCompanyName","compName","getButtonClasses","classes","post","url","json","companySkills","dismissedListingHashes","fetchJobDesc","locations","numJobs","previousListingHashes","err","httpResponse","body","console","error","JTBD","JTBDFOO","filtered","filter","parseInt","postedDate","toLowerCase","includes","slice","activeIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07d7cc27.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass JobCard extends Component {\r\n  render() {\r\n    //just showing the information for jobs(title,\r\n    //company name and short desc).\r\n    //It could be a function but i'm more into classes\r\n    return (\r\n      <div\r\n        className=\"media-body\"\r\n        onClick={() => {\r\n          this.props.onClickActive(this.props.jobs);\r\n        }}\r\n      >\r\n        <h5 className=\"Title\">{this.props.jobs.jobTitle}</h5>\r\n        <p className=\"companyName\">{this.props.jobs.companyName}</p>\r\n        <p className=\"shortDesc\">{this.props.jobs.shortDesc}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JobCard;\r\n","import React, { Component } from \"react\";\r\nimport JobCard from \"./JobCard\";\r\nclass JobCards extends Component {\r\n  getClassNames = (status) => {\r\n    return \"media \" + status;\r\n  };\r\n  render() {\r\n    //creating an array of JobCard component, which will present the\r\n    // jobTitle, companyName and shortDesc;\r\n    //also the status property is showing if the card is selected or not\r\n    //and the onActive property is given recursively by App.js. It updates\r\n    //the preview div and selected job from the list\r\n    //and rendering it\r\n    let cards = [];\r\n    for (let i = 0; i < this.props.jobs.length; i++)\r\n      cards.push(\r\n        <li className={this.getClassNames(this.props.jobs[i].status)}>\r\n          <JobCard\r\n            key={i}\r\n            jobs={this.props.jobs[i] || \"\"}\r\n            onClickActive={this.props.onClickActive}\r\n          ></JobCard>\r\n        </li>\r\n      );\r\n    return <ul className=\"list-unstyled jobs\">{cards}</ul>;\r\n  }\r\n}\r\n\r\nexport default JobCards;\r\n","import React, { Component } from \"react\";\r\n//a simple navbar\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar  navbar-light bg-light  sticky-top\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nclass ActiveJob extends Component {\r\n  //this is the preview component, here i display the active job data\r\n  render() {\r\n    return (\r\n      <div className=\"w-100 p-3 text-white bg-dark previewJob\">\r\n        <img src=\"/logo192.png\" alt=\"image\" height=\"192\" width=\"192\" />\r\n        <br></br>\r\n        <h3>{this.props.job.jobTitle || \" \"}</h3>\r\n        <p>{this.props.job.companyName || \" \"}</p>\r\n        <p className=\"activeJobDesc\">{this.props.job.shortDesc || \" \"}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ActiveJob;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Search extends Component {\r\n  //used for matching the company name. OnChange event is used to\r\n  // give data to App.js which will modify his state and update\r\n  //the list of jobs to be displayed\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <form className=\"form-inline\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">@</span>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Company name\"\r\n            aria-label=\"CompanyName\"\r\n            onChange={(event) => {\r\n              this.props.onChangeMatchingCompanyName(event.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\nimport JobCards from \"./Components/JobCards\";\nimport NavBar from \"./Components/NavBar\";\nimport ActiveJob from \"./Components/ActiveJob\";\nimport Search from \"./Components/Search\";\nimport \"./App.css\";\nimport \"./responsive.css\";\nconst request = require(\"request\");\n\nclass App extends Component {\n  state = {\n    jobs: [],\n    showOption: \"first10\",\n    activeJob: {},\n    matchingCompanyName: \"\",\n  };\n  constructor() {\n    super();\n    //the POST call json body\n    let searchingData = {\n      companySkills: true,\n      dismissedListingHashes: [],\n      fetchJobDesc: true,\n      jobTitle: \"Business Analyst\",\n      locations: [],\n      numJobs: 20,\n      previousListingHashes: [],\n    };\n    //I did this because the scope of request interference with *this* class scope\n    let handleUpdateJobsList = this.handleUpdateJobsList;\n    //fetching the data from API with the request module\n    //also i can use fetch api from vanilla if you prefer it\n    request.post(\n      { url: \"https://www.zippia.com/api/jobs/\", json: searchingData },\n      function (err, httpResponse, body) {\n        //returning an error message in case of error\n        if (err) {\n          return console.error(\"upload failed:\", err);\n        }\n        //getting the response and handling the data gotten\n        handleUpdateJobsList(body.jobs, body.totalJobs);\n      }\n    );\n  }\n  handleUpdateJobsList = (jobs, totalJobs) => {\n    //updating the state with the jobs list\n    //and setting the active job for preview element\n    this.setState({\n      jobs,\n      totalJobs,\n      activeJob: {\n        jobTitle: jobs[0].jobTitle,\n        companyName: jobs[0].companyName,\n        shortDesc: jobs[0].shortDesc,\n      },\n    });\n  };\n\n  handleClickActive = (el) => {\n    //seting the element clicked as activeJob\n    this.setState({ activeJob: el });\n  };\n  handleChangeShowOption = () => {\n    //switching them to get a proper use of \"this week\" button\n    //i made this so simple cause we've got only 2 cases:D\n    if (this.state.showOption === \"first10\")\n      this.setState({ showOption: \"firstWeek\" });\n    else this.setState({ showOption: \"first10\" });\n  };\n\n  handleChangeMatchingCompanyName = (compName) => {\n    //updating the state atribute for matching the company name\n    //this function is called by the input type=\"text\"\n\n    this.setState({\n      matchingCompanyName: compName,\n    });\n  };\n  getButtonClasses = () => {\n    //switching the color for \"this week button\" to visually see if it is\n    //active or not\n    let classes = \"btn thisWeekBtn \";\n    if (this.state.showOption === \"firstWeek\") classes += \"btn-primary\";\n    else classes += \"btn-light\";\n\n    return classes;\n  };\n  render() {\n    let JTBD; //jobsToBeDisplayed\n    let JTBDFOO = []; //temporary array to get only the keys we need\n    //selecting what sorting algorithm for data we need\n\n    JTBD = [...this.state.jobs]; //picking all elements in JTBD\n\n    if (this.state.showOption === \"firstWeek\") {\n      //picking just the jobs from the last week\n      //if the option is checked\n      let filtered = this.state.jobs.filter(\n        (el) => parseInt(el.postedDate) < 7\n      );\n      JTBD = [...filtered];\n    }\n    // searching for the matching company name\n    //also matching for every substring from its name\n    JTBD = JTBD.filter((el) =>\n      el.companyName\n        .toLowerCase()\n        .includes(this.state.matchingCompanyName.toLowerCase())\n    );\n    //geting only 10 of them\n    JTBD = JTBD.slice(0, 10);\n    //geting in the temporary array only the key values we need for the\n    //job cards and overwritting the JTBD after that.\n    for (let el of JTBD) {\n      JTBDFOO.push({\n        jobTitle: el.jobTitle,\n        companyName: el.companyName,\n        shortDesc: el.shortDesc,\n        status: \"\",\n      });\n    }\n    JTBD = JTBDFOO;\n    // searching for the active element in the list of jobs\n    let activeIndex = 0;\n    let el = this.state.activeJob;\n    for (let i = 0; i < JTBD.length; i++) {\n      let job = JTBD[i];\n      if (\n        job.jobTitle == el.jobTitle &&\n        job.companyName == el.companyName &&\n        job.shortDesc == el.shortDesc\n      )\n        activeIndex = i;\n    }\n    if (JTBD.length != 0) JTBD[activeIndex].status = \"active\";\n\n    /*\n    ok so the exhaustive dom tree is:\n     fullPage which represent the full page, that guarantee that i dont exceed the 100vh limit\n    Navbar - the component for the navigation bar, static and simple\n    Container - responsive bootstrap class, mainly used for margins in case of curved screens\n    main - a display flex container which take care of proper view for jobslist and preview\n    jobsMenu for the 2 important buttons and the list of jobs retrieved from the api\n    there is a div under jobsMenu used for displaying inline search and this week buttons\n    and an ul with a bunch of generated li. they got className's from bootstrap\n    The final dom element is the preview element which retrieve data from App.js\n    through this.state.activeJob and show them:D\n    Important components are:\n    ActiveJob which is the preview elem\n    JobCards which is the showcase for a bunch of JobCard components\n    Navbar- static basic\n    Search - for the magnifique searching area\n    */\n    return (\n      <div className=\"fullPage\">\n        <NavBar />{\" \"}\n        <div className=\"container\">\n          <div className=\"main\">\n            <div className=\"jobsMenu\">\n              <div className=\"d-flex\">\n                <Search\n                  onChangeMatchingCompanyName={\n                    this.handleChangeMatchingCompanyName\n                  }\n                />\n                <button\n                  className={this.getButtonClasses()}\n                  onClick={(props) => {\n                    this.handleChangeShowOption();\n                  }}\n                >\n                  this week\n                </button>\n              </div>\n              <JobCards jobs={JTBD} onClickActive={this.handleClickActive} />\n            </div>\n\n            {/*a component made for the entire jobCards menu*/}\n            <ActiveJob job={this.state.activeJob} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}